#include  <stdio.h>
#include  <stdlib.h>
#define  NULL  0
char text[20],path[20];

struct  node
{
  int  data ;
  char filename[20];
  struct  node  *next ;
};

void  create(struct  node  **pfirst)
{
  int  i , n ;
  struct  node  *pnode , *p ;

  printf("Enter the number of programs required:\n") ;
  scanf("%d",&n) ;

  printf("Enter the data of each program:\n") ;
  for(i=1 ; i<=n ; i++)
  {
    pnode=(struct node*)malloc(sizeof(struct node)) ;

    if(pnode==NULL)
    {
      printf("Memory overflow. Unable to create.\n") ;
      return ;
    }
    printf("Enter the index no. of program:");
    scanf("%d" , &pnode->data) ;
    printf("Enter the filename of program:");
    scanf("%s",pnode->filename);
   
    pnode->next=NULL ;  
    if(*pfirst==NULL)
      *pfirst=p=pnode ;
    else
    {
      p->next=pnode ;
      p=pnode ;
    }
  }
}

void  insertafter(struct  node  **pfirst , int  x , int  k)
{
  struct  node  *pnode , *p ;

  pnode=(struct node*)malloc(sizeof(struct node)) ;
  if(pnode==NULL)
  {
    printf("Memory overflow. Unable to create.\n") ;
    return ;
  }

  p=*pfirst ;

  while(p!=NULL)
  {
    if(p->data==k)
    break ;
    p=p->next ;
  }

  if(p==NULL)
     printf("Required index not found.\n") ;
  else
  {
    pnode->data=x ;
    printf("\nEnter the filename of program\n");
    scanf("%s",pnode->filename);
    pnode->next=p->next ;
    p->next=pnode ;
  }
}

void search(struct  node  *first , int  k)
{
  struct  node  *p;

  p=first ;
  while(p!=NULL)
  {
    if(p->data==k)
    break ;
    p=p->next ;
  }

  if(p==NULL)
      printf("Required node not found.\n") ;
  else
    {
      printf("\nRequired node is found.\n") ;
      strcpy(text,p->filename);
    }
}


void  traverse(struct  node  *first)
{
  struct  node  *p ;
  if(first==NULL)
    printf("Linked List Empty") ;
  else
  {
    printf("Linked List is as shown: \n") ;

    p=first ;
    while(p!=NULL)
    {
      printf("%d->%s ",p->data,p->filename) ;
      p=p->next ;
    }
    printf("\n") ;
  }
}

void  count(struct  node  *first)
{
  int  n=0 ;
  struct  node  *p ;

  p=first ;
  while(p!=NULL)
  {
    n++ ;
    p=p->next ;
  }

  printf("Number of programs in Linked List is %d \n",n) ;
}




void main()
{
int choice,choice1,choice2,index,ch,x,k,z=3;
char password[20],fname[20],c,filename[100];
FILE *fptr,*fptr1,*fptr2;
struct node *first=NULL;
clrscr();
do
{
clrscr();
printf("\n***\tWelcome to LOGIN page\t***");
printf("\n\n*)Enter your choice:\n");
z=3;
printf("\n1:Administrator\n2:Guest\n3:Exit\n");
scanf("%d",&choice);
switch(choice)
{
	case 1:
  do
    {
	printf("\nEnter the password:");
  	scanf("%s",password);
  	if(strcmp(password,"dypatil123")==0)
  	 {
		clrscr();
		printf("\n\t WELCOME TO ADMINISTRATOR PAGE\n");
  		  do
  		  {
  		    printf("\n Menu: \n");
  		    printf("1:Create List \n");
  		    printf("2:Insert After \n");
  		    printf("3:Print the index \n");
  		    printf("4:Count the total \n");
		    printf("5:Exit \n");

    			printf("\nEnter your choice: ");
    			scanf("%d",&ch);
          clrscr();
      			switch(ch)
      	    {
          	      case 1:
          	      create(&first);
          	      break;

          	      case 2:
          	      printf("Enter the index number of new Program: ");
          	      scanf("%d",&x);
      	      printf("Enter the index value of that program after which the new program is to be inserted: ");
          	      scanf("%d",&k);
          	      insertafter(&first,x,k);
          	      break;

      	      case 3:
          	      traverse(first);
          	      break;

          	      case 4:
          	      count(first);
          	      break;

      	      case 5:
                  choice1=2;
          	      break;
          	}

    		  }while(ch!=5) ;

  	  }
  	 else
  	  {
    	  z--;
    		printf("\n\t!!!...INVALID PASSWORD...!!!\n");
    	  printf("\nMENU:");
    		printf("\n\n1:WANNA TRY AGAIN (you have < %d > attempts left)\n\n2:GO BACK TO LOGIN PAGE",z);
		scanf("%d",&choice1);
    clrscr();
    	  if(z<=0)
    	    exit(0);
      }
	 }while(choice1!=2);

	break;

	case 2:
  clrscr();
	printf("\tWELCOME TO GUEST SESSION\n");
	printf("Choose an index no. of program from given list:\n");
	traverse(first);
	scanf("%d",&index);
	if(index > 3)
	{
	  printf("INVALID CHOICE");
		break;
	}
	search(first,index);
	sprintf(fname, "%s.txt", text);
	fptr = fopen(fname,"r");

	if (fptr == NULL)
	 {
		printf("Cannot open file \n");
		exit(0);
	 }
   clrscr();
	  // Read contents from file
	  printf("\nPROGRAM:\n");
	  c = fgetc(fptr);
	  while (c != EOF)
	  {
		printf ("%c", c);
		c = fgetc(fptr);
	  }
		printf("\nDO YOU WANT THIS PROGRAM COPIED ?\n");
	  printf("\n1:YES\n2:NO\n");
	  scanf("%d",&choice2);
	      switch(choice2)
	      {
		case 1:
            sprintf(filename, "%s.txt", text);
 
            // Open one file for reading
            fptr1 = fopen(filename, "r");
            if (fptr1 == NULL)
            {
            printf("Cannot open file %s \n", filename);
            getch();
            exit(0);
            }
           
            printf("Enter the filename to open for writing \n");
            scanf("%s", filename);
           
            // Open another file for writing
            fptr2 = fopen(filename, "w");
            if (fptr2 == NULL)
            {
                printf("Cannot open file %s \n", filename);
                getch();
                exit(0);
            }
         
            // Read contents from file
            c = fgetc(fptr1);
            while (c != EOF)
            {
                fputc(c, fptr2);
                c = fgetc(fptr1);
            }
         
            printf("\nContents copied to %s", filename);
            getch();
            fclose(fptr1);
            fclose(fptr2);
    break;
    case 2:
		      break;
	      }
break;
}

fclose(fptr);
getch();
}while(choice!=3);
}
